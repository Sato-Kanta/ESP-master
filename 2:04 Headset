/*based on 1.3.1
  added eye_emg mode
  2.1.1- PCレス化してボタンで動かすやつ
  マルチタスクを導入。ボタン入力とマトリクス駆動をサブのタスクに割り当て。
  【20210702】 
  ・BCボタンを入れ換え
  ・感度調整フラグ(adjust_flag)=1の時にDボタンを押すと、ヘッドギアの感度調整(head_sensitivity)が0-8の間でできる。
    head_sensitivityはDボタンを押すたびにインクリメントされ、ESP-Nowの送信データの20バイト目に格納されている。
  ・抜き取り動作の関数(ext_scope())がおかしかったので修正
  【20210714】
  ・ボタンのピン修正
  ・感度調整の操作方法を追加
  　C→A：噛み締めなしの咬筋データ取得
  　C→B：噛み締めありの咬筋データ取得
  ・LEDMATRIXに表示する内容変更に伴い送信データを追加(20番台以降)
  【20210719】
  ・ESP-Nowで送信するハニカミセンサの生データを16段階→32段階へ変更(blebuf[]内)

  【20210722】
  ・Dボタンに閾値レベルを変更できるシステムを追加(D→Aで閾値データ+1/16　D→Bで閾値データ-1/16 D→Cで閾値データデフォルトに戻す(1/2))
  　　　　　　　　　　　　　　↑なくなりました。

  【20210729】
  ・Bボタンに抜取等の動作を行うシステムを追加(B→Aで抜取(Zoomout) B→Cで挿入(Zoomin) B→DでYAWPITCH緩める動作)
  ・Dボタンはニュートラルに変更
  ・閾値レベルはつまみ(可変抵抗)で変更可能
  
*/
#include <Wire.h>
#include <WiFi.h>
#include <esp_now.h>
#include <EEPROM.h>
#include "head_angle.h"
#include "i2c.h"
#include "motor_control.h"
#include "serial_lib.h"
#include "espnow.h"
#include "freertos/task.h"
#include<cmath>

#define I2C_BAUD_RATE 403400 //I2C通信速度(bps)
#define slaveAddr 0x10  //スレーブ側のアドレス
#define SDA 23  //SDA
#define SCL 22  //SCL

//シリアル通信ボーレート設定
#define UART_BAUD_RATE 115200 //Arduinoシリアルモニタ
#define UART1_BAUD_RATE 57600 //コントロールソフト
#define UART2_BAUD_RATE 115200  //長崎大コンピュータ

#define CHANNEL 0

//ポテンショ入力端子
#define posx 36
#define posy 39
#define posz 34
#define thre 35

//正規
#define MAX_YAW 750                   //左限界
#define MIN_YAW 570                   //右限界      
#define MAX_PITCH 540                 //上限界
#define MIN_PITCH 380                 //下限界
#define MAX_ZOOM 1000                  //ズームアウト限界
#define MIN_ZOOM 150                  //ズームイン限界


//偽物
/*
#define MAX_YAW 750                   //左限界
#define MIN_YAW 450                   //右限界      
#define MAX_PITCH 540                 //上限界
#define MIN_PITCH 300                 //下限界
#define MAX_ZOOM 800                  //ズームアウト限界
#define MIN_ZOOM 450                  //ズームイン限界
#define REMOVE_POSITION  1015          //内視鏡を着脱する際
*/

//動作表示灯
#define CTLCHK 32 //コントロールPC通信
#define HESCHK 33 //ハニカミ・眼電切り替え(眼電オン=>1)
#define ITFCHK 25 //インターフェース通信
#define MTXCHK 26 //LEDマトリクス通信
#define DRVCHK 27 //モータ駆動信号通信
//#define BITCHK 14 //噛んでるかどうか

//操作ボタン
#define btn_A 4 //運転・停止
#define btn_B 21 //抜取
#define btn_C 13 //調整
#define btn_D 14 //予備(INPUT_PULLUP不可)

#define REMOVE_POSITION  1015          //内視鏡を着脱する際
#define CENTER_YAW ((MAX_YAW-MIN_YAW)/2+MIN_YAW)     //中央（ヨー角）
#define CENTER_PITCH ((MAX_PITCH-MIN_PITCH)/2+MIN_PITCH)                //中央（ヨー角)

//運転時の速度
#define DRV_IN 20
#define DRV_OUT 25
#define DRV_UP 75
#define DRV_DOWN 75
#define DRV_RIGHT 100
#define DRV_LEFT 75

//挿入時の速度
#define IN_ZOOM 10
//抜き取り時の速度
#define EXT_ZOOM 20
#define EXT_PITCH 30
#define EXT_YAW 30

//ESP_NOWで接続するデバイスの数
#define N_DEV 4

//マトリクスにバーで表示する筋活動センサの範囲
#define HEAD_CDC_WDH 1000

//タイマ
#define MatTMR 100000 //マトリクスへの送信周期設定(us) 100ms


//pic-windows共通
enum eCODE {
  OFFSET, RESET,
  START, STOP,
  R_UP, R_DOWN,
  L_UP, L_DOWN,
  SPEED_UP, SPEED_DOWN,
  SEND_DATA, DATA_CHECK,
  NEUTRAL,
  REMOVE_SCOPE,
  SELECT
};

//動作命令通信用
enum eDRIVE {
  BRAKE, ACTION,
  PITCH, YAW, ZOOM,
  FORWARD, REVERSE, POSITION
};

//operation_status
enum eOP {
  op_BRAKE,
  op_PITCH,
  op_YAW,
  op_ZOOMIN,
  op_ZOOMOUT,
  op_SET
};

/////////////////////state data///////////////////////
unsigned int head_R, R_offset = 0, R_critical = 10000;
unsigned int   head_cdc_1, L_offset = 0, cdc_1_critical = 5000;
unsigned int eye_emg_1, eye_emg_critical = 2048;
int DX = 0, DY = 0, DZ = 0; //head posture angle
int pitch_y = 0, yaw_z = 0, roll_x = 0; //Angle difference data
int position_x, position_y, position_z; //potentiometer
int ch1_offset = 0, ch2_offset = 0; //hanikami offset
int Ser1timeout = 1000; //シリアル通信テストの待ち時間(ms)
int small=1,full=0;
int sflag=0,dis_flag=0;
unsigned int minimam=0,maximam=4000;
float threshold=0;
int threshold_change=8;
int cdc_per=0;
int neu_flag=0;
int neu_back=0;

////////////////////flag data/////////////////////
int offset_flag = 1; //
int training = 0;    //1ならI2C通信を行わない
int head = 0; //噛んでいるかどうかのフラグ　これによりマトリクスにデータを送る
int neutral = 0; //モータをエンコーダの0位置にもっていく
int encoder_offset = 0; //モータエンコーダ初期化用
int start_flag = 0; //1:動かす

int tmp_position_z=0;  //取り除く前のズームユニットの位置

int operation_status = op_SET;//システム状態　op_SET=5:設定中
int eye_flag = 0;//眼電を使用するかの切り替え。0=ハニカミ,1=眼電
float speed_change = 1000.0f;//speed 変更
float senser_threshold_per = 0.45f;//閾値％変更

int ext_scope = 0; //内視鏡の抜取のための動作をするか。する=1
int in_scope = 0; //内視鏡の挿入のための動作をするか。する=1
int ext_wire = 0; //内視鏡器具のワイヤ抜取のためのYAW,PITCHの動作(右下へ)をするか。する=1
int neu_scope = 0; //ニュートラルポジションに戻す。する=1
int adjust_flag = 0; //筋活動センサの感度調整をするか。する=1

int head_sensitivity = 0;

//ESPNOW data//
uint8_t slaveMAC[N_DEV][6]= {
  //{0x40, 0xF5, 0x20, 0x54, 0xCB, 0xD4},  //マスター（自機）
  {0x30, 0xAE, 0xA4, 0x08, 0x7B, 0x18},  //LEDマトリクス
  {0x94, 0xB9, 0x7E, 0x8C, 0x76, 0x2C},    //ヘッドギア（ハニカミ）
  {0xA4, 0xCF, 0x12, 0x76, 0x8F, 0xE8},   //ヘッドギア（アゴ）
  {0x24, 0x0A, 0xC4, 0x0F, 0x9E, 0x88}    //リモコン
};
esp_now_peer_info_t slave;

enum sendfrom{
  MATRIX,
  HEADGEAR_H,
  HEADGEAR_A,
  RIMOKON
  };

//タイマ準備
//LEDマトリクス送信タイマ
volatile int interruptCounter0;
volatile int interruptCounter1;
hw_timer_t *timer0 = NULL;
hw_timer_t *timer1 = NULL;

//運転時の速度
struct drivespd{
  int in = DRV_IN;
  int out = DRV_OUT;
  int up = DRV_UP;
  int down = DRV_DOWN;
  int right = DRV_RIGHT;
  int left = DRV_LEFT;
};
struct drivespd drv;

//抜取時の速度
struct extspd{
  int zoom = EXT_ZOOM;
  int pitch = EXT_PITCH;
  int yaw = EXT_YAW;
};
struct extspd ext;


void task0(void* pvParameters) {
  while (1) {
    if((adjust_flag%3) == 0 && sflag == 0 && dis_flag == 0){
      if(!digitalRead(btn_A)){//運転・停止
        delay(500);
        start_flag = !start_flag; //ON/OFFのフラグ
      }
    }

    if(start_flag == 0 && (adjust_flag%3) == 0 && sflag == 0){
      if(!digitalRead(btn_B)){
        delay(500);
        dis_flag = !dis_flag; //抜き取り挿入時のフラグ
      }
      if(dis_flag == 1){
        if(!digitalRead(btn_A)){//抜取(Zoomout)
          delay(500);
          //neu_back = !neu_back;
          ext_scope = !ext_scope;
        }
        if(!digitalRead(btn_C)){//挿入(Zoomin)
          delay(500);
          in_scope = !in_scope;
        }
        if(!digitalRead(btn_D)){//YAWPITCH緩める(ワイヤを外しやすくする)
          delay(500);
          ext_wire = !ext_wire;
        }
      }
    }

    if(!digitalRead(btn_C) && sflag == 0 && dis_flag == 0){//表示変更
      delay(500);
      adjust_flag += 1;
    }
    if((adjust_flag%3) == 2 && start_flag == 0 && sflag == 0){
      if(!digitalRead(btn_A)){//Minデータ登録
        delay(500);
        minimam=head_cdc_1;
      }
      if(!digitalRead(btn_B)){//Maxデータ登録
        delay(500);
        maximam=head_cdc_1;
      }
      if(!digitalRead(btn_D)){//割り当てなし
        delay(500);
        //あまり
      }
    }

    if(!digitalRead(btn_D) && start_flag == 0 && (adjust_flag%3) == 0 && dis_flag == 0){//ニュートラルポジション
      delay(500);
      neu_scope = !neu_scope;
      neu_flag=!neu_flag;
    }

    /*if(!digitalRead(btn_D) && start_flag == 0 && (adjust_flag%3) != 1){//閾値データ変更(表示灯に赤く点灯)
      delay(500);
      sflag = !sflag;
    }
    if((adjust_flag%3) != 1 && start_flag == 0 && sflag == 1){
      if(!digitalRead(btn_A)){//閾値を上げる(1/16)
        delay(500);
        threshold_change += 1;
        if(threshold_change > 16) threshold_change=16;
      }
      if(!digitalRead(btn_B)){//閾値を下げる(-1/16)
        delay(500);
        threshold_change -= 1;
        if(threshold_change < 0) threshold_change=0;
      }
      if(!digitalRead(btn_C)){//閾値をデフォルトへ(1/2)
        delay(500);
        threshold_change=8;
      }
    }*/

    //マトリクスにデータを送信
    if (interruptCounter0) {
      MatDrive();
      
      interruptCounter0 = 0;
      
    }
    //Serial.println("SUB CORE TASK NOW");
    //vTaskdelay(200);
    
    vTaskDelay(10);  //WDT発動抑止
  }
}

void init_tasks() {
  // コア0で関数task0を優先順位1で起動
  xTaskCreateUniversal(
    task0,
    "task0",
    65536,
    NULL,
    2,
    NULL,
    PRO_CPU_NUM
  );
}

//一定時間経過に伴うLEDマトリクス駆動
void MatDrive() {

  int pool_p_x, pool_p_y, pool_p_z;
  unsigned char p_x16, p_y16, p_z16, head16;
  unsigned int head_cdc_width = HEAD_CDC_WDH;

  int i,j;
  uint8_t tempMAC[6]={0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};

  cdc_per = 15*fabs(head_cdc_1 - minimam)/(maximam - minimam);
  head16 = (head_cdc_1 - cdc_1_critical + head_cdc_width) / (head_cdc_width * 2) * 16;

  pool_p_x = position_x;
  pool_p_y = position_y;
  pool_p_z = position_z;

  if (pool_p_x >= MAX_YAW) {
    pool_p_x = MAX_YAW;
  }
  else if (pool_p_x <= MIN_YAW) {
    pool_p_x = MIN_YAW;
  }

  if (pool_p_y >= MAX_PITCH) {
    pool_p_y = MAX_PITCH;
  }
  else if (pool_p_y <= MIN_PITCH) {
    pool_p_y = MIN_PITCH;
  }

  if (pool_p_z >= MAX_ZOOM) {
    pool_p_z = MAX_ZOOM;
  }
  else if (pool_p_z <= MIN_ZOOM) {
    pool_p_z = MIN_ZOOM;
  }

  p_x16 = (pool_p_x - MIN_YAW) / ((MAX_YAW - MIN_YAW) / 16);
  p_y16 = (pool_p_y - MIN_PITCH) / ((MAX_PITCH - MIN_PITCH) / 16);
  p_z16 = (pool_p_z - MIN_ZOOM) / ((MAX_ZOOM - MIN_ZOOM) / 16);

  if (p_x16 >= 16) p_x16 = 15;
  p_x16 = 15 - p_x16;
  if (p_y16 >= 16) p_y16 = 15;
  p_y16 = 15 - p_y16;
  if (p_z16 >= 16) p_z16 = 15;



  //espnowで送信
  uint8_t blebuf[26];//無線用のデータ格納場所
  memset(blebuf, 0, sizeof blebuf);
  blebuf[0] = (uint8_t)((int)p_y16 & 0xff);
  blebuf[1] = (uint8_t)((int)p_x16 & 0xff);
  blebuf[2] = (uint8_t)((int)p_z16 & 0xff);
  //blebuf[3] = (uint8_t)((int)head16 & 0xff);
  blebuf[3] = (uint8_t)((int)head_cdc_1/256 & 0xff);
  blebuf[4] = (uint8_t)((int)(head) & 0xFF); //1=噛んでる, 0=噛んでない
  
  blebuf[5] = (uint8_t)((int)(operation_status) & 0xFF);
  blebuf[6] = (uint8_t)((int)(start_flag) & 0xFF);        //1=運転, 0=停止
  blebuf[7] = (uint8_t)((int)(adjust_flag) & 0xFF);       //1=感度調整中, 0=そうでない
  blebuf[8] = (uint8_t)((int)(ext_scope) & 0xFF);      //1=内視鏡抜き取り動作中, 0=そうでない
  
  blebuf[9] = (uint8_t)((int)(drv.in) & 0xFF);
  blebuf[10] = (uint8_t)((int)(drv.out) & 0xFF);
  blebuf[11] = (uint8_t)((int)(drv.up) & 0xFF);
  blebuf[12] = (uint8_t)((int)(drv.down) & 0xFF);
  blebuf[13] = (uint8_t)((int)(drv.right) & 0xFF);
  blebuf[14] = (uint8_t)((int)(drv.left) & 0xFF);
  blebuf[15] = (uint8_t)((int)(ext.zoom) & 0xFF);
  blebuf[16] = (uint8_t)((int)(ext.pitch) & 0xFF);
  blebuf[17] = (uint8_t)((int)(ext.yaw) & 0xFF);
  blebuf[18] = (uint8_t)((int) cdc_1_critical/256 & 0xFF);
  blebuf[19] = (uint8_t)((int)(head_sensitivity) & 0xFF); //ヘッドギアの感度(0-8)
  blebuf[20] = (uint8_t)((int) movAve(3,analogRead(thre))/256 & 0xFF);
  blebuf[21] = (uint8_t)((int)(dis_flag) & 0xFF);
  blebuf[22] = (uint8_t)((int)(neu_flag) & 0xFF);
  blebuf[23] = (uint8_t)((int)minimam/256 & 0xFF);
  blebuf[24] = (uint8_t)((int)maximam/256 & 0xFF);
  blebuf[25] = (uint8_t)((int)(cdc_per) & 0xFF);
  
  esp_err_t result = esp_now_send(NULL, blebuf, sizeof(blebuf));
  //第1引数をNULLにするとpeerとして登録したデバイス全部に送る

  delay(10);//入れた方が安定する

}

//データを書き込む
void eeprom_write(){
  if(EEPROM.read(0x00) != drv.in){EEPROM.write(0x00, drv.in);}
  if(EEPROM.read(0x01) != drv.out){EEPROM.write(0x01, drv.out);}
  if(EEPROM.read(0x02) != drv.up){EEPROM.write(0x02, drv.up);}
  if(EEPROM.read(0x03) != drv.down){EEPROM.write(0x03, drv.down);}
  if(EEPROM.read(0x04) != drv.right){EEPROM.write(0x04, drv.right);}
  if(EEPROM.read(0x05) != drv.left){EEPROM.write(0x05, drv.left);}
  if(EEPROM.read(0x06) != ext.zoom){EEPROM.write(0x06, ext.zoom);}
  if(EEPROM.read(0x07) != ext.pitch){EEPROM.write(0x07, ext.pitch);}  
  if(EEPROM.read(0x08) != ext.yaw){EEPROM.write(0x08, ext.yaw);}
  if(EEPROM.read(0x09) != head_sensitivity){EEPROM.write(0x09, head_sensitivity);}
  EEPROM.commit();
}

//データを読み出す
void eeprom_read(){
    drv.in = EEPROM.read(0x00);
    drv.out = EEPROM.read(0x01);
    drv.up = EEPROM.read(0x02);
    drv.down = EEPROM.read(0x03);
    drv.right = EEPROM.read(0x04);
    drv.left = EEPROM.read(0x05);
    ext.zoom = EEPROM.read(0x06);
    ext.pitch = EEPROM.read(0x07);
    ext.yaw = EEPROM.read(0x08);
    head_sensitivity = EEPROM.read(0x09);
}


void now_state() {
  switch (eye_flag) {
    case 0: //ハニカミを使用する場合
      if (head_cdc_1 > cdc_1_critical) { //噛んだら
        head = 1;
        //digitalWrite(BITCHK, HIGH);
      } else { //噛むのやめたら
        head = 0;
        //digitalWrite(BITCHK, LOW);
      }
      break;

    case 1:
      if (eye_emg_1 > eye_emg_critical) { //眼電を使用する場合
        head = 1;
        //digitalWrite(BITCHK, HIGH);
      } else {
        head = 0;
        //digitalWrite(BITCHK, LOW);
      }
      break;

    default:
      head = 0;
  }

  //頭部角度の差分を求める
  pitch_y = -Pitch_diff(DY, head);
  yaw_z = -Yaw_diff(DZ, head);
  roll_x = -Roll_diff(DX, head);
}

void Drive() {   //ドライブ関数
    static int roll_flag = 0,I2C_count = 0;  
    if(roll_x > 10 || roll_x < -10){
        if(operation_status == op_BRAKE) {roll_flag =1;}
    }
    if(head == 1){
        if(roll_flag==0  && operation_status<op_ZOOMIN){
      if(yaw_z > 10 || yaw_z < -10){
                //モニター用フラグを立てる
                operation_status = op_YAW;
                  Serial.print("yaw_z=");
                  Serial.print(yaw_z);
                  Serial.print(" deg, position_x=");
                  Serial.print(position_x);
                  Serial.print(", YAW_");
                  
                //スレーブに制御用角度を送信
                if(yaw_z<-5 && position_x < MAX_YAW){
                  digitalWrite(DRVCHK, HIGH);
                  //I2Csend3byte(slaveAddr, YAW, FORWARD, (speed_change/1000.0f)*adjust_left(drv.left, position_x));       //左へ
                  I2Csend3byte(slaveAddr, YAW, FORWARD, 40);
                  Serial.println("LEFT");
                }
                else if(yaw_z>5 && position_x > MIN_YAW){
                  digitalWrite(DRVCHK, HIGH);
                  //I2Csend3byte(slaveAddr, YAW, REVERSE, (speed_change/1000.0f)*adjust_right(drv.right, position_x-MIN_YAW));        //右へ 
                  I2Csend3byte(slaveAddr, YAW, REVERSE, 50);   
                  Serial.println("RIGHT");
                }
                else
                  I2Csend3byte(slaveAddr, YAW, BRAKE, 0);
                  digitalWrite(DRVCHK,LOW);
                  Serial.println("BRAKE_Y");
      }
      else if(pitch_y > 10 || pitch_y < -10){
                //モニター用フラグを立てる
                operation_status = op_PITCH;
                  Serial.print("pitch_y=");
                  Serial.print(pitch_y);
                  Serial.print(" deg, position_y=");
                  Serial.print(position_y);
                  Serial.print(", PITCH_");
                  
                //スレーブに制御用角度を送信
                if(pitch_y<-5 && position_y>MIN_PITCH){
                  digitalWrite(DRVCHK, HIGH);
                  //I2Csend3byte(slaveAddr, PITCH, FORWARD, (speed_change/1000.0f)*adjust_down(drv.down, position_y));       //下へ
                  I2Csend3byte(slaveAddr, PITCH, FORWARD, 40);
                  Serial.println("DOWN");
                }
                else if(pitch_y>5 && position_y<MAX_PITCH){
                  digitalWrite(DRVCHK, HIGH);
                  //I2Csend3byte(slaveAddr, PITCH, REVERSE, (speed_change/1000.0f)*adjust_up(drv.up, position_y));       //上へ
                  I2Csend3byte(slaveAddr, PITCH, REVERSE,40);
                  Serial.println("UP");
                }
                else
                  I2Csend3byte(slaveAddr, PITCH, BRAKE, 0);
                  digitalWrite(DRVCHK,LOW);
                  Serial.println("BRAKE_P");
            }
            
            else{
                operation_status = op_BRAKE;//停止表示
                //それ以外は停止
                I2Csend3byte(slaveAddr, PITCH, BRAKE, 0);
                I2Csend3byte(slaveAddr, YAW, BRAKE, 0);
                I2Csend3byte(slaveAddr, ZOOM, BRAKE, 0);
                digitalWrite(DRVCHK,LOW);
                Serial.println("YAW_PITCH_BRAKE");
            }
            
    }
    else if(roll_flag == 1){
            if(roll_x > 10 || roll_x  < -10){
                //モニター用フラグを立てる
                if(roll_x < -5)   operation_status=op_ZOOMOUT; //ZOOM OUT       
                if(roll_x > 5)    operation_status=op_ZOOMIN; //ZOOM IN
                  Serial.print("roll_x=");
                  Serial.print(roll_x);
                  Serial.print(" deg, position_z=");
                  Serial.print(position_z);
                  Serial.print(", ZOOM_");
                  
                //スレーブに制御用操作量を送信
                if(roll_x>10 && position_z>MIN_ZOOM){
                  digitalWrite(DRVCHK, HIGH);
                  I2Csend3byte(slaveAddr, ZOOM, REVERSE, 20 /*13+(roll_x/5)*/);        //前進3
                  Serial.println("IN");
                }
                else if(roll_x<-10 && position_z<MAX_ZOOM){
                  I2Csend3byte(slaveAddr, ZOOM, FORWARD, 25/*+(-roll_x/2)*/);    //後退4
                  digitalWrite(DRVCHK, HIGH);
                  Serial.println("OUT");
                }
                else
                  I2Csend3byte(slaveAddr, ZOOM, BRAKE, 0);
                  digitalWrite(DRVCHK, LOW);
                  Serial.println("BRAKE_Z");
            }
            else{
                //それ以外は停止
                I2Csend3byte(slaveAddr, PITCH, BRAKE, 0);
                I2Csend3byte(slaveAddr, YAW, BRAKE, 0);
                I2Csend3byte(slaveAddr, ZOOM, BRAKE, 0);
                digitalWrite(DRVCHK,LOW);
                Serial.println("DEFAULT_BRAKE");
            }
        }
    }
  else{
    //head==0で止める
        roll_flag = 0;
        operation_status = op_BRAKE;//表示状態初期化
        I2Csend3byte(slaveAddr, PITCH, BRAKE, 0);
        I2Csend3byte(slaveAddr, YAW, BRAKE, 0);
        I2Csend3byte(slaveAddr, ZOOM, BRAKE, 0);
        digitalWrite(DRVCHK,LOW);
    }
    
}

int extDrive(struct extspd ext) 
{
  digitalWrite(DRVCHK, HIGH);
  
  int center_yaw = (MAX_YAW - MIN_YAW) / 2 + MIN_YAW;
  int center_pitch = (MAX_PITCH - MIN_PITCH) / 2 + MIN_PITCH;
  
  //ピッチの中心から10%以上離れていれば動かす(ニュートラル)
  while (abs(position_y - center_pitch) > center_pitch * 0.01 && start_flag == 0 && ext_scope == 1) {
    read_position();
    operation_status = op_PITCH;
    Serial.println("REMOVE_NEUTRAL");
    if ((position_y - center_pitch) > 0) { //上を向いていたら
      I2Csend3byte(slaveAddr, PITCH, FORWARD, ext.pitch/2);  //下へ
      Serial.println("REMOVE_NEWTRAL_DOWN");
    }
    else {                             //下を向いていたら
      I2Csend3byte(slaveAddr, PITCH, REVERSE, ext.pitch/2);  //上へ
      Serial.println("REMOVE_NEUTRAL_UP");
    }
  }
  delay(500);
  operation_status = op_BRAKE;//表示状態初期化
  I2Csend3byte(slaveAddr, PITCH, BRAKE, 0);
  I2Csend3byte(slaveAddr, YAW, BRAKE, 0);
  I2Csend3byte(slaveAddr, ZOOM, BRAKE, 0);

  //ヨーの中心から10%以上離れていれば動かす(ニュートラル)
  while (abs(position_x - center_yaw) > center_yaw * 0.01 && start_flag == 0 && ext_scope == 1) {
    read_position();
    operation_status = op_YAW;
    if ((position_x - center_yaw) > 0) { //左を向いていたら
      I2Csend3byte(slaveAddr, YAW, REVERSE, ext.yaw/2);  //右へ
      Serial.println("REMOVE_NEUTRAL_RIGHT");
    }
    else {                             //右を向いていたら
      I2Csend3byte(slaveAddr, YAW, FORWARD, ext.yaw/2);  //左へ
      Serial.println("REMOVE_NEUTRAL_LEFT");
    }
  }
  delay(500);

  operation_status = op_BRAKE;//表示状態初期化
  I2Csend3byte(slaveAddr, PITCH, BRAKE, 0);
  I2Csend3byte(slaveAddr, YAW, BRAKE, 0);
  I2Csend3byte(slaveAddr, ZOOM, BRAKE, 0);
  
  //ズームアウト
  while (position_z < MAX_ZOOM && start_flag == 0 && ext_scope == 1) {
    read_position();
    operation_status = op_ZOOMOUT;
    I2Csend3byte(slaveAddr, ZOOM, FORWARD, ext.zoom);    //後退4
    Serial.println("REMOVE_OUT");

    //MAX_ZOOM付近になったらbreak
    if(position_z > MAX_ZOOM){
      break;
    }
  }
  operation_status = op_BRAKE;//表示状態初期化
  I2Csend3byte(slaveAddr, PITCH, BRAKE, 0);
  I2Csend3byte(slaveAddr, YAW, BRAKE, 0);
  I2Csend3byte(slaveAddr, ZOOM, BRAKE, 0);
  digitalWrite(DRVCHK,LOW);
  return 0;
}

int inDrive(struct extspd ext) 
{
  digitalWrite(DRVCHK, HIGH);
  //ズームイン
  while (position_z > MIN_ZOOM && start_flag == 0 && in_scope == 1) {
    read_position();
    operation_status = op_ZOOMIN;
    I2Csend3byte(slaveAddr, ZOOM, REVERSE, IN_ZOOM);    //後退4
    Serial.println("REMOVE_IN");

    //MAX_ZOOM付近になったらbreak
    if(position_z < MIN_ZOOM * 1.01){
      break;
    }
  }
  operation_status = op_BRAKE;//表示状態初期化
  I2Csend3byte(slaveAddr, PITCH, BRAKE, 0);
  I2Csend3byte(slaveAddr, YAW, BRAKE, 0);
  I2Csend3byte(slaveAddr, ZOOM, BRAKE, 0);
  digitalWrite(DRVCHK,LOW);
  return 0;
}

int extWire(struct extspd ext)
{
  digitalWrite(DRVCHK, HIGH);
  //右下を向く
  Serial.println("REMOVE_WIRE");
  while (position_x > MIN_YAW && start_flag == 0 && ext_wire == 1) {
    read_position();
    operation_status = op_YAW;
    I2Csend3byte(slaveAddr, YAW, REVERSE, ext.yaw);        //右へ
    Serial.println("REMOVE_WIRE_RIGHT");

    //MIN_YAW付近になったらbreak
    if(position_x < 300){//MIN_YAW-170=400
      break;
    }
  }
  while (position_y > MIN_PITCH-150 && start_flag == 0 && ext_wire == 1) {
    read_position();
    operation_status = op_PITCH;
    I2Csend3byte(slaveAddr, PITCH, FORWARD, ext.pitch);       //下へ
    Serial.println("REMOVE_WIRE_DOWN");

    //MIN_PITCH付近になったらbreak
    if(position_y < 230){//MIN_PITCH-180=200
      break;
    }
  }
  operation_status = op_BRAKE;//表示状態初期化
  I2Csend3byte(slaveAddr, PITCH, BRAKE, 0);
  I2Csend3byte(slaveAddr, YAW, BRAKE, 0);
  I2Csend3byte(slaveAddr, ZOOM, BRAKE, 0);
  digitalWrite(DRVCHK,LOW);
  return 0;
}

int neutralDrive(struct extspd ext)
{
  int center_yaw = (MAX_YAW - MIN_YAW) / 2 + MIN_YAW;
  int center_pitch = (MAX_PITCH - MIN_PITCH) / 2 + MIN_PITCH;
  
  digitalWrite(DRVCHK, HIGH);
  //ピッチの中心から10%以上離れていれば動かす(ニュートラル)
  while (abs(position_y - center_pitch) > center_pitch * 0.01 && start_flag == 0 && neu_scope == 1) {
    read_position();
    operation_status = op_PITCH;
    Serial.println("REMOVE_NEUTRAL");
    if ((position_y - center_pitch) > 0) { //上を向いていたら
      I2Csend3byte(slaveAddr, PITCH, FORWARD, ext.pitch/3);  //下へ
      Serial.println("REMOVE_NEWTRAL_DOWN");
    }
    else {                             //下を向いていたら
      I2Csend3byte(slaveAddr, PITCH, REVERSE, ext.pitch/2);  //上へ
      Serial.println("REMOVE_NEUTRAL_UP");
    }
  }

  //ヨーの中心から10%以上離れていれば動かす(ニュートラル)
  while (abs(position_x - center_yaw) > center_yaw * 0.01 && start_flag == 0 && neu_scope == 1) {
    read_position();
    operation_status = op_YAW;
    if ((position_x - center_yaw) > 0) { //左を向いていたら
      I2Csend3byte(slaveAddr, YAW, REVERSE, ext.yaw/2);  //右へ
      Serial.println("REMOVE_NEUTRAL_RIGHT");
    }
    else {                             //右を向いていたら
      I2Csend3byte(slaveAddr, YAW, FORWARD, ext.yaw);  //左へ
      Serial.println("REMOVE_NEUTRAL_LEFT");
    }
  }
  operation_status = op_BRAKE;//表示状態初期化
  I2Csend3byte(slaveAddr, PITCH, BRAKE, 0);
  I2Csend3byte(slaveAddr, YAW, BRAKE, 0);
  I2Csend3byte(slaveAddr, ZOOM, BRAKE, 0);
  digitalWrite(DRVCHK,LOW);
  return 0;
}

void read_position()
{
  position_x = movAve(0, analogRead(posx) / 4); //0-4095 to 0-1023
  position_y = movAve(1, analogRead(posy) / 4); //0-4095 to 0-1023
  position_z = movAve(2, analogRead(posz) / 4); //0-4095 to 0-1023
}

int movAve(int num, int pos) {
  int i, SUM = 0;
  static int posdata[4][12] = {0};

  for (i = 10; i >= 0; i--) {
    posdata[num][i + 1] = posdata[num][i];
  }
  posdata[num][0] = pos;

  for (i = 0; i < 12; i++) {
    SUM += posdata[num][i];
  }
  return SUM / 12;
}

void Serial1send2byte(int data)
{
  int serial_data[2];
  serial_data[0] = data & 0x00ff;           //下位8ビットデータを代入
  serial_data[1] = data >> 8;             //上位8ビットデータを代入
  Serial1.write( serial_data[0] );          //下位8ビットデータを送信
  Serial1.write( serial_data[1] );          //上位8ビットデータを送信
}

/*
  // デバッグモード検出用
  int chk_serial1( void )
  {
  int i=0;
    while(!Serial1.available() && i<6){
      digitalWrite(CTLCHK, HIGH);
      delay(250);
      digitalWrite(CTLCHK, LOW);
      delay(250);
      i++;
      }
      if(i>5){return 1;}  //USBがつながっていない
      else{return 0;}     //USBがつながっている（デバッグモードオン）
  }
*/

// 送信コールバック
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {

  if (status == ESP_NOW_SEND_SUCCESS) {
    digitalWrite(MTXCHK, HIGH);
  } else {
    digitalWrite(MTXCHK, LOW);
  }
}


// 受信コールバック
void OnDataRecv(const uint8_t *mac_addr, const uint8_t *data, int data_len) {
  digitalWrite(ITFCHK, HIGH);
  
  int DX1, DX2, DY1, DY2, DZ1, DZ2, c2o1, c2o2;
  int i,j;
  int matchflag=1;
  int from=0;
  int WE=0;
  
  unsigned int head_cdc_11, head_cdc_12;
  unsigned int cdc_per;
  unsigned int eye_emg_11, eye_emg_12;
  static int cnt = 0;

//送信元の判定
  //ヘッドギア
  for(i=0; i<N_DEV; i++){
    matchflag=1;
    for(j=0; j<6; j++){
      if(mac_addr[j] != slaveMAC[i][j]){
        matchflag=0;
      }
    }
    if(matchflag==1){
      from=i;
      }
  }

  if((from==HEADGEAR_H) || (from==HEADGEAR_A)){
    //degree roll
    DX1 = data[0];
    DX2 = data[1];
    DX = DX1 | (DX2 << 8);
    DX -= 180;

    //degree pitch
    DY1 = data[2];
    DY2 = data[3];
    DY = DY1 | (DY2 << 8);
    DY -= 180;

    //degree yaw
    DZ1 = data[4];
    DZ2 = data[5];
    DZ = DZ1 | (DZ2 << 8);
    DZ -= 180;

    head_cdc_11 = data[6];
    head_cdc_12 = data[7];
    head_cdc_1 = head_cdc_11 | (head_cdc_12 << 8);
    head_cdc_1 = (head_cdc_1 - 2000)*2;
 
    eye_emg_11 = data[8];
    eye_emg_12 = data[9];
    eye_emg_1 = eye_emg_11 | (eye_emg_12 << 8);
  
  //----------------------------------------------自動閾値設定
    if (offset_flag == 1) {
      threshold=(float)movAve(3,analogRead(thre))/4095;      
      cdc_1_critical = (maximam-minimam)*threshold+minimam;
      Serial.print("threshold=");
      Serial.println(cdc_1_critical,DEC);
      //cdc_1_critical = movAve(3,analogRead(thre));
      //cdc_1_critical = autothreshold(1, head_cdc_1, cdc_1_critical, senser_threshold_per, cnt);
    } else {
      autothreshold(0, 0, 0, 0.00f, 0);
    }
    cnt++;
  }

  if(from==RIMOKON){
    WE=data[10];
    start_flag=data[11];
    adjust_flag=data[12];
    ext_scope=data[13];
    
    drv.in = data[14];
    drv.out = data[15];
    drv.up = data[16];
    drv.down = data[17];
    drv.right = data[18];
    drv.left = data[19];
    ext.zoom = data[20];
    ext.pitch = data[21];
    ext.yaw = data[22];
    
    if(WE){eeprom_write();} //書き込み許可があればEEPROMに書き込む
    
  }
  Serial.print(", from=");
  Serial.print(from,DEC);
  Serial.print(", ");
  
    //デバッグ用-------------------------------------
    for ( int i = 0 ; i < 6 ; i++ ) {
    Serial.print(mac_addr[i], HEX);
    Serial.print(":");
    }
    Serial.println("");
    //---------------------------------------------
  
  digitalWrite(ITFCHK, LOW);
}

//一定時間経過に伴うタイマフラグセット
void IRAM_ATTR TMR0FLGSET() {
  interruptCounter0 = 1;
  
}





void setup() {

  //UART0,1,2セットアップ
  Serial.begin(UART_BAUD_RATE); //ESP-32本体のUSB
  Serial1.begin(UART1_BAUD_RATE, SERIAL_8N1, 18, 19); //コントロールPC
  Serial2.begin(UART2_BAUD_RATE, SERIAL_8N1, 16, 17); //長崎大PC
  Serial.println("SETUP UART END");

  pinMode(posx, ANALOG);
  pinMode(posy, ANALOG);
  pinMode(posz, ANALOG);
  pinMode(thre, ANALOG);
  pinMode(CTLCHK, OUTPUT);
  pinMode(HESCHK, OUTPUT);
  pinMode(ITFCHK, OUTPUT);
  pinMode(MTXCHK, OUTPUT);
  pinMode(DRVCHK, OUTPUT);
  //pinMode(BITCHK, OUTPUT);
  pinMode(btn_A, INPUT_PULLUP);
  pinMode(btn_B, INPUT_PULLUP);
  pinMode(btn_C, INPUT_PULLUP);
  pinMode(btn_D, INPUT_PULLUP);
  Serial.println("SETUP PINMODE END");

  // GGR
  /*
    delay(10);
    int debugEN = serial1_chk();  //1=Serial1とPCがつながっている
  */


  //I2Cセットアップ
  Wire.begin(SDA, SCL); //I2Cに使うピンを設定
  Wire.setClock(I2C_BAUD_RATE);  //I2Cボーレートを設定
  delay(100);//スレーブ側の立ち上がりを待つ
  Serial.println("SETUP I2C END");

  //タイマ初期化
  //マトリクス送信用
  timer0 = timerBegin(0, getApbFrequency() / 1000000, true);
  timerAttachInterrupt(timer0, &TMR0FLGSET, true);
  timerAlarmWrite(timer0, MatTMR, true);  //オフタイマー時間設定
  timerAlarmEnable(timer0);



  
  //ESPNOWセットアップ
  WiFi.mode(WIFI_STA);

  InitESPNow();

  // マルチキャスト用Slave登録

  memset(&slave, 0, sizeof(slave));
  for (int i = 0; i < N_DEV; i++) {
    for (int j = 0; j < 6; j++) {
      slave.peer_addr[j] = slaveMAC[i][j];
    }
    esp_err_t addStatus = esp_now_add_peer(&slave);

    if (addStatus == ESP_OK) {
      Serial.print("SUCCESSFULLY_ADDED_DEV_");
    } else {
      Serial.print("FAILED_TO_ADD_DEV");
    }
    Serial.print(i, DEC);
    Serial.println(", ");

    Serial.print("MAC=");
    for (int i = 0; i < 6; i++) {
      Serial.print(slave.peer_addr[i], HEX);
      if (i != 5) {
        Serial.print(":");
      }
    } Serial.println("");
  }
  /*
    memset(&slave, 0, sizeof(slave));
    for (int i = 0; i < 6; ++i) {
      slave.peer_addr[i] = slaveMAC[i];
    }
    esp_err_t addStatus = esp_now_add_peer(&slave);
    if (addStatus == ESP_OK) {
      // Pair success
      Serial.println("SETUP ESPNOW MATRIX PAIRING END");
    }
  */
  slave.channel = CHANNEL;  //送信に必要

  // ESP-NOWコールバック登録
  esp_now_register_send_cb(OnDataSent);
  esp_now_register_recv_cb(OnDataRecv);

  Serial.println("SETUP ESPNOW CALLBACK END");

  //EEPROM関係
  EEPROM.begin(1024); //1kBを確保
  //前回保存したデータを読み出す
  eeprom_read();
  Serial.println("SETUP EEPROM END");
  
  //サブタスクを起動
  init_tasks();

  Serial.println("SETUP END");
}

void loop() {
  int ext_spd_yaw = EXT_YAW;
  int ext_spd_pitch = EXT_PITCH;
  int ext_spd_zoom = EXT_ZOOM;
  byte var;
    //コントロールPCからのUART受信イベント
    if (Serial1.available()) {
      digitalWrite(CTLCHK, HIGH);
      var=Serial1.read();
      Serial.println("");
      Serial.print("Serial control=");
      Serial.print(var, DEC);
      Serial.println("");
      switch (var) {
        case SEND_DATA:
          Serial1.write(DATA_CHECK);                    //確認
          Serial1send2byte(ch2_offset + 3000);                      //死
          Serial1send2byte(head_cdc_1);                       //head_cdc_1筋電センサ値
          Serial1send2byte(roll_x);         //ロール角
          Serial1send2byte(yaw_z);          //ヨー角
          Serial1send2byte(pitch_y);       //ピッチ角
          Serial1send2byte(cdc_1_critical);            //閾値
          Serial1send2byte(head_R);
          Serial1send2byte((int)speed_change);
          Serial1send2byte((int)(senser_threshold_per * 100));
          Serial1send2byte( position_y );  //ピッチ移動値
          Serial1send2byte( position_x );  //ヨー移動値
          Serial1send2byte( position_z );  //zoom移動値
          Serial1send2byte(operation_status);
          Serial1.write(DATA_CHECK);                    //確認
          break;

        case OFFSET:                                       //グラフautoset
          offset_flag = 1;
          break;

        case RESET:                                        //スレッショルド解放
          offset_flag = 0;
          cdc_1_critical = 5000;
          autothreshold(0, 0, 0, 0.00f, 0);
          break;
        case R_UP:                                         //速度変更
          speed_change += 50;
          if (speed_change > 1500.0f)
            speed_change = 1500.0f;
          break;
        case R_DOWN:                                      //速度変更
          speed_change -= 50;
          if (speed_change < 100.0f)
            speed_change = 100.0f;
          break;

        case L_UP:                                         //閾値上昇
          cdc_1_critical += 100;
          break;
        case L_DOWN:                                       //閾値下降
          cdc_1_critical -= 100;
          break;

        case START:                                        //Start
          start_flag = 1;
          break;

        case STOP://Stop
          start_flag = 0;
          break;

        case NEUTRAL:                                  //モータのencoderが0になるように回転させる
          if (neutral == 0) neutral = 1;
          else neutral = 0;
          break;

        case REMOVE_SCOPE:
          ext_scope = !ext_scope;
          break;

        case SPEED_UP:
          senser_threshold_per += 0.01f;
          if (senser_threshold_per > 0.90f)
            senser_threshold_per = 0.90f;
          break;
        case SPEED_DOWN:
          senser_threshold_per -= 0.01f;
          if (senser_threshold_per < 0.10f)
            senser_threshold_per = 0.10f;
          break;

        case SELECT:
          if (eye_flag == 0) {
            eye_flag = 1;
            digitalWrite(HESCHK, HIGH);
          } else {
            eye_flag = 0;
            digitalWrite(HESCHK, LOW);
          }
          break;
      }
      digitalWrite(CTLCHK, LOW);
    }

    now_state();     //噛んでるかどうか
    read_position(); //位置検出

    if (start_flag == 1) {  //運転
      operation_status = op_BRAKE;//設定中からブレーキ状態へ
      Drive();           //moter drive
    }
    else { //停止
      operation_status = op_SET;//設定中
      I2Csend3byte(slaveAddr, PITCH, BRAKE, 0);
      I2Csend3byte(slaveAddr, YAW, BRAKE, 0);
      I2Csend3byte(slaveAddr, ZOOM, BRAKE, 0);
    }

    if (ext_scope) {
      ext_scope = extDrive(ext); //処理が終わったらextscope=0となる
    }
    else if(in_scope){
      in_scope = inDrive(ext); //処理が終わったらext_wire=0となる
    }
    else if(ext_wire){
      ext_wire = extWire(ext); //処理が終わったらext_wire=0となる
    }
    else if(neu_scope){
      neu_scope = neutralDrive(ext); //処理が終わったらneu_scope=0となる
    }

    
  
    /*Serial.print("start_flag=");
    Serial.print(start_flag, DEC);
    Serial.print(", adjust_flag=");
    Serial.print(adjust_flag, DEC);
    Serial.print(", sflag=");
    Serial.println(sflag, DEC);
    Serial.print("dis_flag=");
    Serial.print(dis_flag, DEC);
    Serial.print(", ext_scope=");
    Serial.print(ext_scope, DEC);
    Serial.print(", in_wire=");
    Serial.print(in_scope, DEC);
    Serial.print(", ext_wire=");
    Serial.print(ext_wire, DEC);
    Serial.print(", neu_scope=");
    Serial.println(neu_scope, DEC);
    Serial.print("encoder=");
    Serial.println(analogRead(thre), DEC);*/
    Serial.print("\nyaw=");
    Serial.println(position_x,DEC);
    Serial.print("\npitch=");
    Serial.println(position_y,DEC);
    //Serial.print("\zoom=");
   // Serial.println(position_z,DEC);
    /*
    Serial.print(" drv.in=");
    Serial.print(drv.in, DEC);
    Serial.print(", drv.out=");
    Serial.print(drv.out, DEC);
    Serial.print(", drv.up=");
    Serial.print(drv.up, DEC);
    Serial.print(", drv.down=");
    Serial.print(drv.down, DEC);
    Serial.print(", drv.right=");
    Serial.print(drv.right, DEC);
    Serial.print(", drv.left=");
    Serial.print(drv.left, DEC);
    Serial.print(", ext.zoom=");
    Serial.print(ext.zoom, DEC);
    Serial.print(", ext.pitch=");
    Serial.print(ext.pitch, DEC);
    Serial.print(", ext.yaw=");
    Serial.print(ext.yaw, DEC);
    Serial.println("");
    */
    /*Serial.print(", roll_x=");
    Serial.print(roll_x, DEC);
    Serial.print(", pitch_y=");
    Serial.println(pitch_y, DEC);
    Serial.print(", yaw_z=");
    Serial.println(yaw_z, DEC);
    Serial.print("Maximam=");
    Serial.print(maximam, DEC);
    Serial.print("Minimam=");
    Serial.println(minimam, DEC);
    Serial.print("sflag=");
    Serial.print(sflag, DEC);*/
    
    //Serial.println("DRIVE_TASK_NOW");
    //delay(100);

    if(Serial.available()){
      byte var = Serial.read();

      switch (var) {
        case '0':
          if(start_flag==0){start_flag=1;}else{start_flag=0;}
        break;
        case '1':
          if(adjust_flag==0){adjust_flag=1;}else{adjust_flag=0;}
        break;
        case '2':
          if(ext_scope==0){ext_scope=1;}else{ext_scope=0;}
        break;
        default:
        break;
      }
    }

  delay(10);
}
